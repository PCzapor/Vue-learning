import type { PropType } from 'vue';
import { HeightT, Position, ToastT } from './types';
declare const _default: import("vue").DefineComponent<{
    toast: {
        type: PropType<ToastT>;
        required: true;
    };
    toasts: {
        type: PropType<ToastT[]>;
        required: true;
    };
    index: {
        type: NumberConstructor;
        required: true;
    };
    expanded: {
        type: BooleanConstructor;
        required: true;
    };
    invert: {
        type: BooleanConstructor;
        required: true;
    };
    heights: {
        type: PropType<HeightT[]>;
        required: true;
    };
    position: {
        type: PropType<Position>;
        required: true;
    };
    visibleToasts: {
        type: NumberConstructor;
        required: true;
    };
    expandByDefault: {
        type: BooleanConstructor;
        required: true;
    };
    closeButton: {
        type: BooleanConstructor;
        required: true;
    };
    interacting: {
        type: BooleanConstructor;
        required: true;
    };
    duration: {
        type: NumberConstructor;
        required: false;
    };
    descriptionClass: {
        type: StringConstructor;
        required: false;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:heights": (heights: HeightT[]) => void;
    removeToast: (toast: ToastT) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    toast: {
        type: PropType<ToastT>;
        required: true;
    };
    toasts: {
        type: PropType<ToastT[]>;
        required: true;
    };
    index: {
        type: NumberConstructor;
        required: true;
    };
    expanded: {
        type: BooleanConstructor;
        required: true;
    };
    invert: {
        type: BooleanConstructor;
        required: true;
    };
    heights: {
        type: PropType<HeightT[]>;
        required: true;
    };
    position: {
        type: PropType<Position>;
        required: true;
    };
    visibleToasts: {
        type: NumberConstructor;
        required: true;
    };
    expandByDefault: {
        type: BooleanConstructor;
        required: true;
    };
    closeButton: {
        type: BooleanConstructor;
        required: true;
    };
    interacting: {
        type: BooleanConstructor;
        required: true;
    };
    duration: {
        type: NumberConstructor;
        required: false;
    };
    descriptionClass: {
        type: StringConstructor;
        required: false;
    };
}>> & {
    "onUpdate:heights"?: ((heights: HeightT[]) => any) | undefined;
    onRemoveToast?: ((toast: ToastT) => any) | undefined;
}, {}, {}>;
export default _default;
