import { CSSProperties } from 'vue';
import { Position, Theme, ToastOptions } from './types';
export interface ToasterProps {
    invert?: boolean;
    theme?: Theme;
    position?: Position;
    hotkey?: string[];
    richColors?: boolean;
    expand?: boolean;
    duration?: number;
    gap?: number;
    visibleToasts?: number;
    closeButton?: boolean;
    toastOptions?: ToastOptions;
    className?: string;
    style?: CSSProperties;
    offset?: string | number;
    dir?: 'rtl' | 'ltr' | 'auto';
}
declare const _default: import("vue").DefineComponent<{
    style: {
        type: import("vue").PropType<CSSProperties>;
        default: () => {};
    };
    dir: {
        type: import("vue").PropType<"auto" | "ltr" | "rtl">;
        default: string;
    };
    className: {
        type: import("vue").PropType<string>;
        default: string;
    };
    invert: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    duration: {
        type: import("vue").PropType<number>;
        default: number;
    };
    position: {
        type: import("vue").PropType<Position>;
        default: string;
    };
    offset: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    visibleToasts: {
        type: import("vue").PropType<number>;
        default: number;
    };
    closeButton: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    gap: {
        type: import("vue").PropType<number>;
        default: number;
    };
    theme: {
        type: import("vue").PropType<Theme>;
        default: string;
    };
    hotkey: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    richColors: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    expand: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    toastOptions: {
        type: import("vue").PropType<ToastOptions>;
        default: () => {};
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    style: {
        type: import("vue").PropType<CSSProperties>;
        default: () => {};
    };
    dir: {
        type: import("vue").PropType<"auto" | "ltr" | "rtl">;
        default: string;
    };
    className: {
        type: import("vue").PropType<string>;
        default: string;
    };
    invert: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    duration: {
        type: import("vue").PropType<number>;
        default: number;
    };
    position: {
        type: import("vue").PropType<Position>;
        default: string;
    };
    offset: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    visibleToasts: {
        type: import("vue").PropType<number>;
        default: number;
    };
    closeButton: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    gap: {
        type: import("vue").PropType<number>;
        default: number;
    };
    theme: {
        type: import("vue").PropType<Theme>;
        default: string;
    };
    hotkey: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    richColors: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    expand: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    toastOptions: {
        type: import("vue").PropType<ToastOptions>;
        default: () => {};
    };
}>>, {
    style: CSSProperties;
    dir: "auto" | "ltr" | "rtl";
    className: string;
    invert: boolean;
    duration: number;
    position: Position;
    offset: string | number;
    visibleToasts: number;
    closeButton: boolean;
    gap: number;
    theme: Theme;
    hotkey: string[];
    richColors: boolean;
    expand: boolean;
    toastOptions: ToastOptions;
}, {}>;
export default _default;
